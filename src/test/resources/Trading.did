type definite_canister_settings = 
 record {
   compute_allocation: nat;
   controllers: opt vec principal;
   freezing_threshold: nat;
   memory_allocation: nat;
 };
type VerifyResult = 
 variant {
   err:
    variant {
      CannotNotify: AccountIdentifier__3;
      InsufficientBalance;
      InvalidToken: TokenIdentifier__3;
      NotList;
      NotSell;
      Other: text;
      Rejected;
      TxNotFound;
      Unauthorized: AccountIdentifier__3;
      VerifyTxErr;
    };
   ok;
 };
type User__3 = 
 variant {
   address: AccountIdentifier;
   "principal": principal;
 };
type User__2 = 
 variant {
   address: AccountIdentifier;
   "principal": principal;
 };
type User__1 = 
 variant {
   address: AccountIdentifier;
   "principal": principal;
 };
type UserId__2 = principal;
type UserId__1 = principal;
type UserId = principal;
type TransferResult = 
 variant {
   err: TransferError;
   ok: BlockIndex;
 };
type TransferError = 
 variant {
   BadFee: record {expected_fee: ICP;};
   InsufficientFunds: record {balance: ICP;};
   Other: text;
   TxCreatedInFuture;
   TxDuplicate: record {duplicate_of: BlockIndex;};
   TxTooOld: record {allowed_window_nanos: nat64;};
 };
type TradeType = 
 variant {
   auction;
   fixed;
   offer;
 };
type TradeResult = 
 variant {
   err: Err;
   ok: Order;
 };
type TokenIdentifier__7 = text;
type TokenIdentifier__6 = text;
type TokenIdentifier__5 = text;
type TokenIdentifier__4 = text;
type TokenIdentifier__3 = text;
type Time__1 = int;
type StatsListings = 
 record {
   price: Price__3;
   tokenIdentifier: TokenIdentifier__6;
 };
type SettleRecordResult = 
 variant {
   err: variant {
          NoSettleRecord;
          RetryExceed;
          SettleErr;
        };
   ok;
 };
type SettlePointResult = 
 variant {
   err: variant {
          NoSettlePoint;
          RetryExceed;
          SettleErr;
        };
   ok;
 };
type SettleICPResult = 
 variant {
   err: variant {
          NoSettleICP;
          RetryExceed;
          SettleErr;
        };
   ok;
 };
type Result_9 = 
 variant {
   err: ProfileErr;
   ok: ProfileLet;
 };
type Result_8 = 
 variant {
   err: CollectionErr;
   ok;
 };
type Result_13 = 
 variant {
   err: text;
   ok: BackupEntries;
 };
type Result_12 = 
 variant {
   err: text;
   ok;
 };
type Result_11 = 
 variant {
   err: CollectionErr;
   ok: principal;
 };
type Result_10 = 
 variant {
   err: ProfileErr;
   ok;
 };
type RecordSettle = 
 record {
   "record": RecordEventInit;
   retry: nat64;
 };
type RecordEventType = 
 variant {
   acceptOffer;
   auction;
   auctionDeal;
   claim;
   list;
   mint;
   offer;
   point;
   sold;
   transfer;
 };
type RecordEventInit = 
 record {
   collection: principal;
   date: int;
   eventType: RecordEventType;
   from: opt principal;
   fromAID: opt AccountIdentifier__4;
   item: TokenIdentifier__5;
   price: opt Price__1;
   to: opt principal;
   toAID: opt AccountIdentifier__4;
 };
type ProfileLet = 
 record {
   avatar: Img;
   banner: Img;
   bio: text;
   collected: vec TokenIdentifier__7;
   collections: vec principal;
   created: vec TokenIdentifier__7;
   email: text;
   favorited: vec TokenIdentifier__7;
   followeds: vec UserId__2;
   followers: vec UserId__2;
   notification: vec text;
   offersMade: vec OfferId__2;
   offersReceived: vec OfferId__2;
   time: Time__1;
   userId: UserId__2;
   userName: text;
 };
type ProfileErr = 
 variant {
   alreadyCreate;
   defaultAccount;
   noProfile;
 };
type Price__3 = nat64;
type Price__2 = nat64;
type Price__1 = nat64;
type Price = nat64;
type PointSale = 
 record {
   price: nat64;
   retry: nat64;
   user: User__2;
 };
type PageParam = 
 record {
   page: nat;
   pageCount: nat;
 };
type Order = 
 record {
   buyer: User__3;
   fee: Fee__1;
   memo: nat64;
   price: Price__2;
   seller: User__3;
   time: int;
   tokenIdentifier: TokenIdentifier__4;
   tradeType: TradeType;
 };
type OfferStatus = 
 variant {
   accepted;
   ineffect;
   rejected;
 };
type OfferId__2 = nat;
type OfferId__1 = nat;
type OfferId = nat;
type Offer = 
 record {
   bidder: principal;
   offerId: OfferId__1;
   price: Price__2;
   seller: principal;
   status: OfferStatus;
   tokenIdentifier: TokenIdentifier__4;
   ttl: int;
 };
type NewProfile = 
 record {
   avatar: Img;
   banner: Img;
   bio: text;
   email: text;
   notification: vec text;
   userName: text;
 };
type NewFixed = 
 record {
   price: Price__2;
   tokenIdentifier: TokenIdentifier__4;
 };
type NFTStatsImmut = 
 record {
   favoriters: vec principal;
   lastPrice: Price__3;
   listTime: opt Time__1;
   views: vec principal;
 };
type NFTInfo = 
 record {
   favoriters: vec principal;
   lastPrice: Price__1;
   listTime: opt Time__1;
   listing: Listing__2;
   views: nat;
 };
type Listings = 
 record {
   price: Price__3;
   tokenIdentifier: TokenIdentifier__6;
 };
type Listing__2 = 
 variant {
   auction: Auction;
   fixed: Fixed;
   unlist;
 };
type ListResult = 
 variant {
   err: Err;
   ok;
 };
type Links = 
 record {
   discord: opt text;
   instagram: opt text;
   medium: opt text;
   telegram: opt text;
   twitter: opt text;
   yoursite: opt text;
 };
type Img__1 = text;
type Img = text;
type ICPSale = 
 record {
   memo: nat64;
   price: nat64;
   retry: nat64;
   user: principal;
 };
type ICPRefund = 
 record {
   memo: nat64;
   price: nat64;
   retry: nat64;
   user: AccountIdentifier__4;
 };
type ICP = record {e8s: nat64;};
type Fixed = 
 record {
   fee: Fee;
   price: Price__1;
   seller: principal;
   tokenIdentifier: TokenIdentifier__5;
 };
type Fee__1 = 
 record {
   platform: Price__1;
   royalties: Price__1;
 };
type Fee = 
 record {
   platform: Price__1;
   royalties: Price__1;
 };
type Err = 
 variant {
   auctionFail;
   nftAlreadyListing;
   nftNotAuction;
   nftNotlist;
   nftlockedByOther;
   notFoundOffer;
   offerExpired;
   other: text;
 };
type CreatorInfo = 
 record {
   canister: principal;
   user: UserId__1;
   userName: text;
 };
type CollectionStatsImmut = 
 record {
   createTime: Time__1;
   floorPrice: Price__1;
   listings: vec Listings;
   tradeCount: nat;
   volumeTrade: Price__1;
 };
type CollectionSortingField = 
 variant {
   createTime;
   floorPrice;
   listingNumber;
   name;
   volumeTrade;
 };
type CollectionSortFilterArgs = 
 record {
   ascending: bool;
   filterArgs: CollectionFilterArgs;
   limit: nat;
   offset: nat;
   sortingField: CollectionSortingField;
 };
type CollectionInit = 
 record {
   banner: opt Img__1;
   category: opt Category;
   description: opt text;
   featured: opt Img__1;
   links: opt Links;
   logo: opt Img__1;
   name: opt text;
   openTime: opt Time__1;
   releaseTime: opt Time__1;
   royalties: Price__1;
   url: opt text;
 };
type CollectionInfo__1 = 
 record {
   banner: opt Img__1;
   canisterId: principal;
   category: opt Category;
   creator: UserId;
   description: opt text;
   featured: opt Img__1;
   links: opt Links;
   logo: opt Img__1;
   name: text;
   releaseTime: opt Time__1;
   royalties: Price__1;
   url: opt text;
 };
type CollectionInfoImmut = 
 record {
   banner: opt Img__1;
   canisterId: principal;
   category: opt Category;
   creator: UserId;
   description: opt text;
   featured: opt Img__1;
   links: opt Links;
   logo: opt Img__1;
   name: text;
   releaseTime: opt Time__1;
   royalties: Price__1;
   url: opt text;
 };
type CollectionInfo = 
 record {
   banner: opt Img__1;
   canisterId: principal;
   category: opt Category;
   creator: UserId;
   description: opt text;
   featured: opt Img__1;
   links: opt Links;
   logo: opt Img__1;
   name: text;
   releaseTime: opt Time__1;
   royalties: Price__1;
   url: opt text;
 };
type CollectionFilterArgs = 
 record {
   category: opt vec text;
   creator: opt vec UserId;
   name: opt text;
 };
type CollectionErr = 
 variant {
   guestCannotCreateCollection;
   maxCollNum;
   perMaxCollNum;
 };
type CollectionData = 
 record {
   creator: opt CollectionCreatorData;
   info: CollectionInfo__1;
   stats: opt CollectionStatsImmut;
 };
type CollectionCreatorData = 
 record {
   avatar: Img__1;
   bio: text;
   time: Time__1;
   userId: UserId;
   userName: text;
 };
type Category = text;
type BlockIndex = nat64;
type BackupEntries = 
 variant {
   collectionStats: vec record {
                          principal;
                          CollectionStatsImmut;
                        };
   collections: vec record {
                      principal;
                      CollectionInfoImmut;
                    };
   nftStats: vec record {
                   TokenIdentifier__5;
                   NFTStatsImmut;
                 };
 };
type Auction = 
 record {
   fee: Fee;
   highestBidder: opt principal;
   highestPrice: opt Price__1;
   resevePrice: opt Price__1;
   seller: principal;
   startPrice: Price__1;
   tokenIdentifier: TokenIdentifier__5;
   ttl: int;
 };
type AccountIdentifier__4 = text;
type AccountIdentifier__3 = text;
type AccountIdentifier = text;
service : {
  acceptOffer: (OfferId) -> (Offer);
  addCanisterController: (principal, principal) -> () oneway;
  addCreator_whitelist: (vec principal) -> ();
  backupGetEntries: (text, nat, nat) -> (Result_13);
  backupGetSize: () -> (vec record {
                              text;
                              nat;
                            });
  backupPutEntries: (text, BackupEntries) -> (Result_12);
  balance: () -> (nat);
  batchSettleICP: (vec nat) -> (vec SettleICPResult);
  batchSettleICPRefund: (vec nat) -> ();
  batchSettleRecord: (vec nat) -> ();
  buyNow: (TokenIdentifier__3) -> (TradeResult);
  cancelOffer: (OfferId) -> (bool);
  checkTx: (vec TokenIdentifier__3) -> ();
  collectionStats: (principal) ->
   (opt
     record {
       createTime: Time__1;
       floorPrice: Price;
       listings: vec StatsListings;
       tradeCount: nat;
       volumeTrade: Price;
     }) query;
  createCollection: (CollectionInit) -> (Result_11);
  createProfile: (NewProfile) -> (Result_10);
  createProfile4User: (principal, NewProfile) -> (Result_10);
  created: (TokenIdentifier__3, principal) -> ();
  delCreator_whitelist: (vec principal) -> ();
  deleteCanister: (principal) -> ();
  deleteWait: (TokenIdentifier__3) -> ();
  deleteWaitByHeight: (nat) -> ();
  favorite: (TokenIdentifier__3) -> ();
  findOfferById: (OfferId) -> (opt Offer);
  findOfferByNft: (TokenIdentifier__3) -> (vec Offer) query;
  findProfile: () -> (Result_9) query;
  findProfileWho: (User__2) -> (Result_9) query;
  flushICPRefundSettlement: () -> ();
  flushICPSettlement: () -> ();
  flushPointSettlement: () -> ();
  flushRecordSettlement: () -> ();
  follow: (principal) -> ();
  getCanisterSettings: (principal) -> (definite_canister_settings);
  getCollectionData: (principal) -> (opt CollectionData) query;
  getConfig: () ->
   (record {
      block: text;
      lanuchpad: principal;
      ledeger: text;
      owner: principal;
      platformFeeAccount: principal;
      point: principal;
      "record": principal;
    }) query;
  getCreator_whitelist: () -> (vec principal) query;
  getICPRefundSettlements: () -> (vec record {
                                        nat;
                                        ICPRefund;
                                      }) query;
  getICPSettlements: () -> (vec record {
                                  nat;
                                  ICPSale;
                                }) query;
  getListingByHeight: (nat64) -> (opt Listing__2);
  getListingByTid: (nat) -> (opt Listing__2);
  getOwner: () -> (principal);
  getPointSettlements: () -> (vec record {
                                    nat;
                                    PointSale;
                                  }) query;
  getRecordSettlement: () -> (vec record {
                                    nat;
                                    RecordSettle;
                                  }) query;
  importCollection: (principal, text, CollectionInit) -> (Result_8);
  listCollected: () -> (vec TokenIdentifier__3) query;
  listCollections: () -> (vec text) query;
  listCollections2: (opt CollectionSortFilterArgs) ->
   (vec CollectionData) query;
  listCreated: () -> (vec TokenIdentifier__3) query;
  listCreators: () -> (vec CreatorInfo);
  listFavorite: () -> (vec TokenIdentifier__3) query;
  listOfferMade: () -> (vec Offer) query;
  listOfferReceived: () -> (vec Offer) query;
  listedDataRecovery: (principal, Price, TokenIdentifier__3) -> (ListResult);
  listfolloweds: () -> (vec principal) query;
  listfollowers: () -> (vec principal) query;
  myCollectionList: () -> (vec CollectionInfo) query;
  nftInfo: (TokenIdentifier__3) -> (NFTInfo) query;
  nftInfos: (vec TokenIdentifier__3) -> (vec NFTInfo) query;
  nftInfosByCollection: (principal, vec nat32) -> (vec NFTInfo) query;
  nftInfosByCollectionPageable: (principal, PageParam) -> (vec NFTInfo) query;
  queryPlatformFee: () ->
   (record {
      account: AccountIdentifier__3;
      fee: Price;
      precision: nat64;
    }) query;
  queryPointRatio: () -> (nat64) query;
  querySortedCollection: (CollectionSortingField, bool, nat, nat,
   CollectionFilterArgs) -> (vec principal);
  recordPoint: (User__1, Price) -> ();
  rejectOffer: (OfferId) -> ();
  removeCollection: (principal, text) -> (Result_8);
  sell: (NewFixed) -> (ListResult);
  setICPRefundSettlements: (nat, AccountIdentifier__3, nat64, nat64) -> ();
  setICPSettlements: (nat, principal, nat64, nat64) -> ();
  setMinter: (principal, text) -> ();
  setOwner: (principal) -> ();
  setPlatformAccount: (principal) -> ();
  setPlatformFee: (nat64, nat64) -> ();
  setPointRatio: (nat64) -> ();
  setPointSettlements: (nat, principal, nat64) -> ();
  setRateLimit: (nat, nat) -> ();
  setRateLimitFalse: () -> ();
  setWICP: (text) -> ();
  settleICP: (nat) -> (SettleICPResult);
  settleICPRefund: (nat) -> (SettleICPResult);
  settlePoint: (nat) -> (SettlePointResult);
  settleRecord: (nat) -> (SettleRecordResult);
  subscribe: (text) -> ();
  unSell: (TokenIdentifier__3) -> (ListResult);
  unfavorite: (TokenIdentifier__3) -> ();
  unfollow: (principal) -> ();
  updateCollection: (CollectionInfo) -> (bool);
  updateCreators: () -> (text);
  updateOffer: (OfferId, Price) -> (bool);
  updateProfile: (NewProfile) -> (bool);
  verifyTx: (nat64) -> (VerifyResult);
  verifyTxWithMemo: (nat64) -> (VerifyResult);
  view: (TokenIdentifier__3) -> ();
  volumeTraded: (principal, Price) -> ();
  wallet_receive: () -> (nat);
  withdraw: (AccountIdentifier__3, Price, nat64) -> (TransferResult);
}
